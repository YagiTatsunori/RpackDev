---
backgroundColor: #dfd
marp: true
---


# Rパッケージ開発入門

### Chapter 1-3, 14, 15

### 担当：市野川

---

# 第1章 はじめに

## パッケージとは？ 
- Rにおけるパッケージとは：**コード**、**データ**、**ドキュメント**、**テスト**を一緒にバンドルするもので、簡単に他の人と共有できるもの
- パッケージにする利点：誰もが「パッケージの使い方」を知っているので、簡単に使えるし、使ってもらえる


```
# CRAN上のパッケージをインストールする
install.packages("MASS")
library(MASS)
package?MASS # パッケージ全体のhelpを表示する（用意されていないパッケージも多い）
```

```
# github上のパッケージをインストールする
devtools::install_github("ichimomo/frasyr")
library(frasyr)
package?frasyr # パッケージ全体のhelpを表示する（用意されていないパッケージも多い）
```

---

## 自分のためのパッケージ開発

コードを共有しない場合でも：「コード開発がより簡単になる」という利点がある：パッケージには「規約」があるから

**自分パッケージを使う利点**
- 時間が短縮できる：「規約」（テンプレート）に従うことで、自分のプロジェクトにおけるファイル構造に悩まなくてすむ（Rの関数はどこに置こう？データはどのフォルダに置こう？）
   - Rの関数：R/
   - テストコード：tests/
   - データ：data/
- 「規約」に従っていれば、「規約」にのっとったさまざまな「ツール」が使える
   - devtoolsのcheck, test, load_allなど

--- 

## 1.1 哲学

- できるだけ自動化する（devtools: 一般的な開発タスクを自動化するための関数のあつまり）
- 優れたコードエディタを使おう（Rstudio, Emacs, VSCodeなど）
- 更に深く知りたい人は「Writing R extensions（https://cran.r-project.org/doc/manuals/R-exts.html）」

--- 

### 1.2 学習開始

- R, Rstudioの入手
- パッケージのインストール

```
install.packages(c("devtools","roxygen2","testthat","knitr"))

# devtoolsの開発版を使いたい人は
# devtools::install_github("hadley/devtools")
```

- Rtoolsのインストール

```
# Rtoolsがインストールされているかの確かめ
library(devtools)
has_devel()
```

```
# 自分の環境の確認
devtools::session_info()
```

---

# 2章: パッケージの構造

## 2.1 パッケージに名前をつける

** 要件**
- 数字・文字・ピリオドだけで構成される、文字で始まる、ピリオドで終わらない
- ハイフンやアンダースコアは不可

** おすすめすること **
- ピリオドは使わない
- 簡単にgoogleで検索でき、ユニークな名前を選ぶ（すでに使用されているかどうかはCRANやgoogleなどで検索する）
- 大文字と小文字の両方を使わない
- 問題を連想させる単語を選び、かつユニークな言葉になるようにする
- 略語（Rcpp)を使う、最後にrを追加する

---

## 2.2 パッケージを作成する

- Rstudioを使う場合
   1. [File] → [New Project]
   2. [New Directory]を選択
   3. [R package]を選択
   4. 名前をつけて[Create Project]をクリックする
- コマンドを使う場合（.projファイルは作成されない）
```
devtools::create("~/test/")
```
- `package.skelton()`という関数もあるが、これは使わないこと

---

$\rightarrow$ **パッケージにとって必要な最小のコンポーネントが作成される**

1. DESCRIPTION：パッケージの説明を記述するファイル（必要なライブラリやパッケージの説明などを編集する）
2. NAMESPACE：このパッケージで定義される関数名などの設定（自動生成されるので基本的には編集しない）
3. R/ ディレクトリ：Rの関数をこのディレクトリで定義
   - hello.Rというサンプルファイルも
4. man/ Rのhelpとなる
   - hello.Rdというサンプルファイルも
5. .Rbuildignore : パッケージを**ビルド**するときに、ビルドの対象から外すファイルのリスト
6. test.Rproj　：　プロジェクトファイル（次スライド）

---

## 2.3 RStudioプロジェクト

- test.RprojというファイルをダブルクリックするとRstudioが立ち上がり、このファイルがおかれているディレクトリからRstudioがスタートする→それ以降「test」というプロジェクトのもとで作業が進められる
- プロジェクトを使うメリット（パッケージ開発に限らず）
   - プロジェクト間が独立している
   - 便利なコードナビゲーションツールが使える
   - 便利なキーボード・ショートカット（Alt-Shift-K）

---

### XXX.projファイルの構造

- [Tools] → [Project Options] で設定された内容がここに反映される
   - Global optionが変わっても、このプロジェクト内ではいつも同じ設定で作業ができる

- 以下はfrasyrの設定（林さんのおすすめ）

```
Version: 1.0

RestoreWorkspace: No
SaveWorkspace: No
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: pdfLaTeX

AutoAppendNewline: Yes
StripTrailingWhitespace: Yes
LineEndingConversion: Posix

BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source
PackageRoxygenize: rd,collate,namespace

```

--- 

## 2.4 パッケージとは

- 2.4.1 ソースパッケージ
   - 自分のパソコンに入っている開発バージョンのパッケージ（さっき、Rstudioから作ったもの）
- 2.4.2 バンドルパッケージ
   - ソースファイル（フォルダ）を一つのファイルに圧縮したもの（拡張子は.tar.gz）
   - `devtools::build()`で作成可能
   - 解凍したものはソースファイルとほぼ同じだが若干違う（.Rbuildignoreで指定されたファイルは除かれる）
   - `install.packages`や[Tools]→[Install packages (install from: Package Archive File)]からファイルを指定してインストール可能
- 2.4.3 バイナリパッケージ
   - Rパッケージ開発ツール(Rtools)を持っていない人に配布する用
   - プラットフォーム固有（Windows用、Mac用、Linux用など）
   - `devtools::build(binary=TRUE)`で作成可能
   
---

ソース・バンドル・バイナリパッケージの違い

![](https://r-pkgs.org/diagrams/package-files.png)

---

- 2.4.4 インストール済のパッケージ
   - バイナリパッケージが解凍されたもので、自分のPCで利用する準備ができているもの

図: パッケージをインストールするさまざまな方法
![](https://r-pkgs.org/diagrams/install-load.png)


---

- 2.4.5 インメモリパッケージ
   - パッケージを使うときに呼び出したあとのパッケージ

### パッケージの使い方のいろいろ

```
# devtoolsというインストール済のパッケージの中のcheckという関数を使う
devtools::check()

# devtoolsというパッケージを予め呼び出しておく
library(devtools)
# requireという関数を使ってもできる
require(devtools)
# "devtools::"をつけなくてもcheckという関数が使える
check()

.libPaths() # 自分がインストールしているライブラリの一覧を表示
```

---

# [The Whole Game (1st chapter, 2nd edition)]

簡単なtoy packageを作って、チェックして、使ってみよう
1. パッケージのひながたをRstudioから作成する
2. 

--- 

# 3章 Rコード

## 3.1 Rコードのワークフロー

開発中のRコードは

`
devtools::load_all()
`

を使って呼び出せます。またはRstudioでContrl-Shift-LでもOKです

--- 

## 3.2 関数をまとめる
